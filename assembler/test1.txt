tmp(0)  := lea   & segU & R0   & R0   & "00000110"; -- segU = 6    12:59:56 am
lea $segU, 0x6
tmp(1)  := store & R0   & segU & R0   & "00000000"; -- grava em HEX0
store $segU, 0x0

tmp(2)  := lea   & segD & R0   & R0   & "00000101"; -- s egD = 5
lea $segD, 0x0

tmp(3)  := store & R0   & segD & R0   & "00000001"; -- grava em HEX1
store $segD, 0x1

tmp(4)  := lea   & minU & R0   & R0   & "00001001"; -- minU = 9
lea $minU, 0x9

tmp(5)  := store & R0   & minU & R0   & "00000010"; -- grava em HEX2
store $minU, 0x2

tmp(6)  := lea   & minD & R0   & R0   & "00000101"; -- minD = 5
lea $minD, 0x5

tmp(7)  := store & R0   & minD & R0   & "00000011"; -- grava em HEX3
store $minD, 0x3

tmp(8)  := lea   & horU & R0   & R0   & "00000010"; -- horU = 2
lea $horU, 0x2
tmp(9)  := store & R0   & horU & R0   & "00000100"; -- grava em HEX4
store $horU, 0x4

tmp(10) := lea   & horD & R0   & R0   & "00000001"; -- horD = 1
lea $horD, 0x1
tmp(11) := store & R0   & horD & R0   & "00000101"; -- grava em HEX5
store $horD, 0x5

-- setando registradores comparadores
tmp(12) := lea   & R1   & R0   & R0   & "00000001"; -- 1
lea $R1, 0x1
tmp(13) := lea   & R2   & R0   & R0   & "00000010"; -- 2
lea $R2, 0x2
tmp(14) := lea   & R9   & R0   & R0   & "00001001"; -- 9
lea $R9, 0x9
tmp(15) := lea   & R5   & R0   & R0   & "00000101"; -- 5
lea $R5, 0x5
tmp(16) := lea   & RM   & R0   & R0   & "00000000"; -- 0 = am
lea $RM, 0x0

-- espera 1 seg
LOOP1
tmp(17) := load  & RT   & R0   & R0   & "00000111";
load $RT, 0x7
tmp(18) := lea   & R0   & R0   & R0   & "00000000";
lea $R0, 0x0
tmp(19) := je    & R0   & RT   & R0   & "00010001";
je $RT, LOOP1


-- tmp(20) := inc   & segU & R0   & segU & "00000000"; -- segU+1
-- tmp(21) := store & R0   & segU & R0   & "00000000"; -- grava no HEX0

tmp(20) := store & R0   & R0   & R0   & "00000110"; -- zera time
store $R0, 0x5

-- tmp(23) := jmp   & R0   & R0   & R0   & "00010001";


tmp(21) := jl    & R0   & R9   & segU & "01000000"; ---
jl $R9, $segU, 0x40

tmp(22) := mov   & segU & R0   & R0   & "00000000";
mov $segU, 0x0
tmp(23) := store & R0   & segU & R0   & "00000000";
store $segU, 0x0
tmp(24) := jl    & R0   & R5   & segD & "00111101"; ---
jl $segD, 0x3D
tmp(25) := mov   & segD & R0   & R0   & "00000000";
mov $segD, 0x0
tmp(26) := store & R0   & segD & R0   & "00000001";
store $segD, 0x1
tmp(27) := jl    & R0   & R9   & minU & "00111010";-- 3A
jl $R9, $minU, 0x3A
tmp(28) := mov   & minU & R0   & R0   & "00000000";
mov $minU, 0x0
tmp(29) := store & R0   & minU & R0   & "00000010";
tmp(30) := jl    & R0   & R5   & minD & "00110111";--37

tmp(31) := mov   & minD & R0   & R0   & "00000000";
tmp(32) := store & R0   & minD & R0   & "00000011";
tmp(33) := jl    & R0   & R9   & horU & "00110010";--32

tmp(34) := je    & R0  & R0  & horD & "00101101";--2D
tmp(35) := jl    & R0  & R2  & horU & "00101010";--2A

tmp(36) := inv   & R0   & R0   & RM   & "00000000";

tmp(37) := mov   & horD & R0   & R0   & "00000000";
tmp(38) := store & R0   & horD & R0   & "00000101";

tmp(39) := mov   & horU & R0   & R1   & "00000000";
tmp(40) := store & R0   & horU & R0   & "00000100";

tmp(41) := jmp   & R0   & R0   & R0   & "00010001";

tmp(42) := inc   & horU & R0   & horU & "00000000";
tmp(43) := store & R0   & horU & R0   & "00000100";
tmp(44) := jmp   & R0   & R0   & R0   & "00010001";--11


tmp(45) := mov   & horU & R0   & R0   & "00000000";
tmp(46) := store & R0   & horU & R0   & "00000100";

tmp(47) := inc   & horD & R0   & horD & "00000000";
tmp(48) := store & R0   & horD & R0   & "00000101";
tmp(49) := jmp   & R0   & R0   & R0   & "00010001";--11

tmp(50) := je    & R0   & R0   & horD & "00110000";--30
tmp(51) := jmp   & R0   & R0   & R0   & "00011101";--1D

tmp(52) := inc   & horU & R0   & horU & "00000000";
tmp(53) := store & R0   & horU & R0   & "00000100";
tmp(54) := jmp   & R0   & R0   & R0   & "00010001";--11

tmp(55) := inc   & minD & R0   & minD & "00000000";
tmp(56) := store & R0   & minD & R0   & "00000011";
tmp(57) := jmp   & R0   & R0   & R0   & "00010001";--11

tmp(58) := inc   & minU & R0   & minU & "00000000";
tmp(59) := store & R0   & minU & R0   & "00000010";
tmp(60) := jmp   & R0   & R0   & R0   & "00010001";--11

tmp(61) := inc   & segD & R0   & segD & "00000000";
tmp(62) := store & R0   & segD & R0   & "00000001";
tmp(63) := jmp   & R0   & R0   & R0   & "00010001";--11

tmp(64) := inc   & segU & R0   & segU & "00000000";
tmp(65) := store & R0   & segU & R0   & "00000000";
tmp(66) := jmp   & R0   & R0   & R0   & "00010001";--11